# Default values of roles

# Edition can be one of: 'ce' (Community Edition) or 'ee' (Enterprise Edition).
#
# The docker_edition should be either ce (Community Edition) or ee (Enterprise 
# Edition). You can also specify a specific version of Docker to install using 
# the distribution-specific format: 
#   Red Hat/CentOS: docker-{{ docker_edition }}-<VERSION>; 
#   Debian/Ubuntu: docker-{{ docker_edition }}=<VERSION>.
#
# You can control whether the package is installed, uninstalled, or at the 
# latest version by setting docker_package_state to present, absent, or latest, 
# respectively. Note that the Docker daemon will be automatically restarted if 
# the Docker package is updated. This is a side effect of flushing all handlers 
# (running any of the handlers that have been notified by this and any other 
# role up to this point in the play).
docker_edition: 'ce'
docker_package: "docker-{{ docker_edition }}"
docker_package_state: present

# Service options.
#
# Variables to control the state of the docker service, and whether it should 
# start on boot. If you're installing Docker inside a Docker container without 
# systemd or sysvinit, you should set these to stopped and set the enabled 
# variable to no.
docker_service_state: started
docker_service_enabled: true
docker_restart_handler_state: restarted

# Docker Compose options.
docker_install_compose: true
docker_compose_version: "1.24.1"
docker_compose_path: /usr/local/bin/docker-compose

# Used only for Debian/Ubuntu. Switch 'stable' to 'edge' if needed.
docker_apt_release_channel: stable
docker_apt_arch: amd64
docker_apt_repository: "deb [arch={{ docker_apt_arch }}] https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}"
docker_apt_ignore_key_error: true

# Used only for RedHat/CentOS/Fedora. You can enable the Edge or Test repo by 
# setting the respective vars to 1.
docker_yum_repo_url: https://download.docker.com/linux/{{ (ansible_distribution == "Fedora") | ternary("fedora","centos") }}/docker-{{ docker_edition }}.repo
docker_yum_repo_enable_edge: 0
docker_yum_repo_enable_test: 0

# A list of users who will be added to the docker group, so they can use Docker 
# on the server).
# 
# example
#
# docker_users:
#   - user1
#   - user2
docker_users:
    - jenkins

# The EPEL repo URL and GPG key URL. Generally, these should not be changed, 
# but if this role is out of date, or if you need a very specific version, 
# these can both be overridden.
epel_repo_url: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
epel_repo_gpg_key_url: "/etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}"
epel_repofile_path: "/etc/yum.repos.d/epel.repo"

# If git_install_from_source is set to false, these two variables define whether
# to use an additional repo for the package installation, and which git packages
# will be installed.
git_enablerepo: ""
git_packages:
  - git
  - git-svn

# If set to TRUE, git will be installed from source, using the version set with
# the 'git_version' variable instead of using a package.
git_install_from_source: false
git_install_path: "/usr"
git_version: "2.16.2"

# If git is already installed at and older version, force a new source build.
# Only applies if git_install_from_source is `true`.
git_install_from_source_force_update: false

# Leave this at it's default.
git_reinstall_from_source: false

# Set the version/development kit of Java to install, along with any other 
# necessary Java packages. Some other options include are included in the 
# distribution-specific files in this role's 'defaults' folder.
#
# #example
## java_packages:
##   - java-1.7.0-openjdk


# If set, the role will set the global environment variable JAVA_HOME to this 
# value.
java_home: ""

# locale on the system
locale_lang: ja_JP.UTF-8 

# The state of the jenkins package install. By default this role installs
#  Jenkins but will not upgrade Jenkins (when using package-based installs).
#  If you want to always update to the latest version, change this to latest.
jenkins_package_state: present

# The system hostname; usually localhost works fine. This will be used during
# setup to communicate with the running Jenkins instance via HTTP requests.
jenkins_hostname: localhost

# The Jenkins home directory which, amongst others, is being used for storing
# artifacts, workspaces and plugins. This variable allows you to override the
# default /var/lib/jenkins location
jenkins_home: /var/lib/jenkins

# The HTTP port for Jenkins' web interface.
jenkins_http_port: 8080

# Default admin account credentials which will be created the first time Jenkins
# is installed.
jenkins_admin_username: admin
jenkins_admin_password: password

# Default admin password file which will be created the first time Jenkins is
# installed as /var/lib/jenkins/secrets/initialAdminPassword
jenkins_admin_password_file: ""

# The location at which the jenkins-cli.jar jarfile will be kept. This is used
# for communicating with Jenkins via the CLI.
jenkins_jar_location: /opt/jenkins-cli.jar

# Jenkins plugins to be installed automatically during provisioning.
#
# example
# jenkins_plugins: [
#                    greenballs, \
#                    ghprb, \
#                    workflow-aggregator, \
#                    aws-codebuild, \
#                    pipeline-aws, \
#                    aws-cloudwatch-logs-publisher, \
#                    aws-lambda, \
#                    snsnotify, \
#                    blueocean, \
#                    docker-workflow, \
#                    slack, \
#                    global-slack-notifier
#                  ]
jenkins_plugins: [
                   greenballs, \
                   ghprb, \
                   workflow-aggregator, \
                   aws-codebuild, \
                   pipeline-aws, \
                   aws-cloudwatch-logs-publisher, \
                   aws-lambda, \
                   snsnotify, \
                   blueocean, \
                   docker-workflow, \
                   slack, \
                   global-slack-notifier
                 ]

# Whether Jenkins plugins to be installed should also install any plugin
# dependencies.
jenkins_plugins_install_dependencies: true

# Use latest to ensure all plugins are running the most up-to-date version.
jenkins_plugins_state: present

# Number of seconds after which a new copy of the update-center.json file
# is downloaded. Set it to 0 if no cache file should be used.
jenkins_plugin_updates_expiration: 86400

# The URL to use for Jenkins plugin updates and update-center information.
jenkins_updates_url: "https://updates.jenkins.io"

# The server connection timeout, in seconds, when installing Jenkins plugins.
jenkins_plugin_timeout: 30

# (Optional) Then Jenkins version can be pinned to any version available on
# http://pkg.jenkins-ci.org/debian/ (Debian/Ubuntu) or
# http://pkg.jenkins-ci.org/redhat/ (RHEL/CentOS).
# If the Jenkins version you need is not available in the default package URLs,
# you can override the URL with your own; set jenkins_pkg_url (Note: the role
# depends on the same naming convention that http://pkg.jenkins-ci.org/ uses).
##  jenkins_version: "1.644"
##  jenkins_pkg_url: "http://www.example.com"

# Used for setting a URL prefix for your Jenkins installation. The option is
# added as --prefix={{ jenkins_url_prefix }} to the Jenkins initialization java
# invocation, so you can access the installation at a path like
# http://www.example.com{{ jenkins_url_prefix }}. Make sure you start the prefix
# with a / (e.g. /jenkins).
jenkins_url_prefix: ""

# Amount of time and number of times to wait when connecting to Jenkins after
# initial startup, to verify that Jenkins is running. Total time to
# wait = delay * retries, so by default this role will wait up to 300 seconds
# before timing out.
jenkins_connection_delay: 5
jenkins_connection_retries: 60

# This role will install the latest version of Jenkins by default (using the
# official repositories as listed above). You can override these variables
# (use the correct set for your platform) to install the current LTS version
# instead:
#
# It is also possible stop the repo file being added by setting
# jenkins_repo_url = ''. This is useful if, for example, you sign your own
# packages or run internal package management (e.g. Spacewalk).
#
## For RedHat/CentOS (role default):
##   jenkins_repo_url: http://pkg.jenkins-ci.org/redhat/jenkins.repo
##   jenkins_repo_key_url: http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
## For Debian (role default):
##   jenkins_repo_url: deb http://pkg.jenkins-ci.org/debian binary/
##   jenkins_repo_key_url: http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key

# Extra Java options for the Jenkins launch command configured in the init
# file can be set with the var jenkins_java_options. For example, if you
# want to configure the timezone Jenkins uses, add
# -Dorg.apache.commons.jelly.tags.fmt.timeZone=America/New_York. By default,
# the option to disable the Jenkins 2.0 setup wizard is added.
jenkins_java_options: "-Djenkins.install.runSetupWizard=false"

# Changes made to the Jenkins init script; the default set of changes set
# the configured URL prefix and add in configured Java options for Jenkins'
# startup. You can add other option/value pairs if you need to set other
# options for the Jenkins init file.
jenkins_init_changes:
  - option: "JENKINS_ARGS"
    value: "--prefix={{ jenkins_url_prefix }}"
  - option: "JENKINS_JAVA_OPTIONS"
    value: "{{ jenkins_java_options }}"

# If you are running Jenkins behind a proxy server, configure these options
# appropriately. Otherwise Jenkins will be configured with a direct Internet
# connection.
jenkins_proxy_host: ""
jenkins_proxy_port: ""
jenkins_proxy_noproxy:
  - "127.0.0.1"
  - "localhost"


# The name of the packge to install to get pip on the system. You can set to
# python3-pip, for example, when using Python 3 on Ubuntu.
pip_package: python-pip

# The role will try to autodetect the pip executable based on the pip_package
# (e.g. pip for Python 2 and pip3 for Python 3). You can also override this
# explicitly, e.g. pip_executable: pip3.6.
pip_executable: pip

# A list of packages to install with pip. Examples below:
#
# pip_install_packages:
#   # Specify names and versions.
#   - name: docker
#     version: "1.2.3"
#   - name: awscli
#     version: "1.11.91"
#
#   # Or specify bare packages to get the latest release.
#   - docker
#   - awscli
#
#   # Or uninstall a package.
#   - name: docker
#     state: absent
#
#   # Or update a package ot the latest version.
#   - name: docker
#     state: latest
#
#   # Or force a reinstall.
#   - name: docker
#     state: forcereinstall
#
#   # Or install a package in a particular virtualenv.
#   - name: docker
#     virtualenv: /my_app/venv
pip_install_packages:
  - name: pip
    state: latest
  - name: ansible
  - name: awscli

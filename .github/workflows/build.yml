---
name: build
on: [deployment, push]

jobs:
  ansible-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Ansible lint
        uses: ansible/ansible-lint-action@master
        with:
          targets: |
            install.yml

  molecule-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro:
          - centos7jp
        python-version:
          - 3.8
          - 3.9

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install -r molecule/requirements/docker

      - name: Create galaxy dependencies file in 'molecule/docker/'
        run: cp roles/requirements.yml molecule/docker/requirements.yml

      - name: Test with molecule
        run: |
          molecule test --scenario-name docker
        env:
          ANSIBLE_FORCE_COLOR: '1'
          MOLECULE_DISTRO: ${{ matrix.distro }}
          PROFILE_TASKS_SORT_ORDER: 'none'
          PROFILE_TASKS_TASK_OUTPUT_LIMIT: '200'
          PY_COLORS: '1'
          TZ: 'Asia/Tokyo'

  molecule-vm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install -r molecule/requirements/vm

      - name: Create galaxy dependencies file in 'molecule/vm/'
        run: |
          cp roles/requirements.yml molecule/vm/requirements.yml

      - name: Set latest AMI image id to environment variables
        run: |
          AMI_ID=$(aws ec2 describe-images \
          --owners "${{ secrets.AMI_OWNER_ID }}" \
          --filters "Name=name,Values=centos*" \
          --query 'Images[*][CreationDate, ImageId, Name]' \
          --output text | sort -r | awk 'NR==1 {print $2}')
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set environment variables with timestamp for making sure Molecule would create unique AWS resources
        run: |
          TIMESTAMP=$(date --date "9 hours" "+%Y%m%d_%H:%M:%S")

          echo "PLATFORM_NAME=jenkins_install_molecule_${TIMESTAMP}" >> $GITHUB_ENV
          echo "KEYPAIR_NAME=jenkins_install_molecule_${TIMESTAMP}" >> $GITHUB_ENV
          echo "SECURITY_GROUP_NAME=jenkins_install_molecule_${TIMESTAMP}" >> $GITHUB_ENV

      - name: Test with molecule
        run: |
          molecule test --scenario-name vm
        env:
          # AMI_ID: sotred in system environment variables
          ANSIBLE_FORCE_COLOR: '1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PROFILE_TASKS_SORT_ORDER: 'none'
          PROFILE_TASKS_TASK_OUTPUT_LIMIT: '200'
          PY_COLORS: '1'
          # TIMESTAMP: sotred in system environment variables
          TZ: 'Asia/Tokyo'
          VPC_SUBNET_ID: ${{ secrets.VPC_SUBNET_ID }}

  trailing-whitespace:
    name: Find Trailing Whitespace
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: harupy/find-trailing-whitespace@56310d7

  yamllint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Execute yamllint
        run: yamllint *

      - name: Show yamllint version
        run: yamllint --version
